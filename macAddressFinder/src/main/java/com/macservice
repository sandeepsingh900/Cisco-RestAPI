package com.macservice;

import org.apache.catalina.Context;
import org.apache.catalina.connector.Connector;
import org.apache.tomcat.util.descriptor.web.SecurityCollection;
import org.apache.tomcat.util.descriptor.web.SecurityConstraint;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory;
import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
import org.springframework.context.annotation.Bean;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

@RestController
public class MacAddressFinderController {
	@Value("${MAC-HOST}")
	private String macHost;

	@GetMapping(path = "/finder/{ipAddress}")
	public String helloWorldPathVariable(@PathVariable final String ipAddress) throws JsonProcessingException {
		ObjectMapper mapper = new ObjectMapper();

		Object response = new RestTemplate().getForObject(macHost + "&search=" + ipAddress, Object.class);

		final String jsonString2 = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(response);
		return jsonString2;
	}

	/*
	 * @Bean public ServletWebServerFactory servletContainer() {
	 * TomcatServletWebServerFactory tomcat = new
	 * TomcatServletWebServerFactory() {
	 * 
	 * @Override protected void postProcessContext(Context context) {
	 * SecurityConstraint securityConstraint = new SecurityConstraint();
	 * securityConstraint.setUserConstraint("CONFIDENTIAL"); SecurityCollection
	 * collection = new SecurityCollection(); collection.addPattern("/*");
	 * securityConstraint.addCollection(collection);
	 * context.addConstraint(securityConstraint); } };
	 * 
	 * tomcat.addAdditionalTomcatConnectors(redirectConnector()); return tomcat;
	 * }
	 * 
	 * private Connector redirectConnector() { Connector connector = new
	 * Connector("org.apache.coyote.http11.Http11NioProtocol");
	 * connector.setScheme("http"); connector.setPort(8080);
	 * connector.setSecure(false); connector.setRedirectPort(8443);
	 * 
	 * return connector; }
	 */

}
